syntax = "proto3";
option csharp_namespace = "SharedLensResources";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "identityprovider/courses.proto";
import "util/validation.proto";
import "util/pagination.proto";
import "util/filtering.proto";

// For adding a new course instance to the Identity Provider
message AddCourseInstanceRequest {
  
  // Id of existing course to which this instance belongs, e.g the 2023 instance of SENG302
  // would belong to the course SENG302, so this would be the ID of the SENG302 course
  int64 parent_course_id = 1;
  
  // The start date and time of the course instance, for example 9am on the morning of the
  // first day of semester 1. Recurring members of a course can manage course instances
  // belonging to the course at any time, but non-recurring members can only access a course
  // instance between its start and end dates - unless given explicit permission otherwise.
  google.protobuf.Timestamp start_date_time = 2;
  
  // The end date and time of the course instance, for example 11.59pm on the final day of 
  // the semester 2 exam period.
  google.protobuf.Timestamp end_date_time = 3;
  
  // The instance-specific stub to be added to the course short-name. Assume that this will be 
  // added to the course's shortname as a suffix. For example, the 2023 instance of the SENG302 
  // course (with shortname 'SENG302') may have the stub '23W', leading to a complete shortname 
  // of 'SENG302-23W'.
  //
  // Each instance must have a unique short name stub within its parent course.
  string short_name_stub = 4;
 
  // Description of this specific course instance. E.g "The 2023 occurrence of SENG302 at UC"
  string description = 5;
}

// Represents a single course instance in the IdP
message CourseInstanceResponse {
  // The IdP's unique identifier for this course instance, generated automatically on creation
  int64 id = 1;
  
  // The existing course to which this course instance belongs
  CourseResponse parent_course = 2;

  // The start date and time of the course instance, for example 9am on the morning of the
  // first day of semester 1. Recurring members of a course can manage course instances
  // belonging to the course at any time, but non-recurring members can only access a course
  // instance between its start and end dates - unless given explicit permission otherwise.
  google.protobuf.Timestamp start_date_time = 3;

  // The end date and time of the course instance, for example 11.59pm on the final day of 
  // the semester 2 exam period.
  google.protobuf.Timestamp end_date_time = 4;

  // The instance-specific stub to be added to the course short-name. Assume that this will be 
  // added to the course's shortname as a suffix. For example, the 2023 instance of the SENG302 
  // course (with shortname 'SENG302') may have the stub '23W', leading to a complete shortname 
  // of 'SENG302-23W'.
  //
  // Each instance must have a unique short name stub within its parent course.
  string short_name_stub = 5;

  // Description of this specific course instance. E.g "The 2023 occurrence of SENG302 at UC"
  string description = 6;
}

// Response when attempting to add a new instance of a course. ValidationResponse informs client
// of whether their request data was valid, and if not, what the errors are that must be addressed. 
// If the request data was valid, the newly created course_instance entity is returned.
message AddCourseInstanceResponse {
  ValidationResponse validation = 1;
  optional CourseInstanceResponse course_instance_response = 2;
}

// Get a course_instance with given course_instance Id, this is the unique ID generated by the IdP
// when course is created
message GetCourseInstanceByIdRequest {
  int64 course_instance_id = 1;
}

// Pagination supported collection of course instances returned from IdP
message PaginatedCourseInstancesResponse {
  repeated CourseInstanceResponse course_instances = 1;
  PaginationResponseOptions pagination_response_options = 2;
}

// For requesting multiple courses_instances from the IdP. Pagination options must be provided, 
// while filtering options, start / end dates, and parent course ID may be provided. If parent 
// course ID is provided, only course instances belonging to the indicated course will be filtered.
message GetPaginatedCourseInstancesRequest {
  PaginationRequestOptions pagination_request_options = 1;
  
  // ID of a parent course from which to consider its instances. If this id is not provided,
  // all course instances from all courses will be used in this query.
  google.protobuf.Int64Value parent_course_id = 2;
  
  // Filters on course instance's short name stub and description
  optional BasicStringFilteringOptions filtering_options = 3;
  
  // Filters to optionally specify an earliest and / or latest start date
  optional BasicDateTimeFilteringOptions start_time_filtering_options = 4;

  // Filters to optionally specify an earliest and / or latest start date
  optional BasicDateTimeFilteringOptions end_time_filtering_options = 5;
}

service LensCourseInstanceService {
  // Retrieve a course instance from the IdP by a specific Id
  rpc GetCourseInstanceById(GetCourseInstanceByIdRequest) returns (CourseInstanceResponse);
  // Get multiple course instances from the IdP, paginated. Course instances may be filtered.
  rpc GetPaginatedCourseInstances(GetPaginatedCourseInstancesRequest) returns (PaginatedCourseInstancesResponse);
  // Only allowed for system admins, adds a new instance of some course to the IdP.
  rpc AddCourseInstance(AddCourseInstanceRequest) returns (AddCourseInstanceResponse);
}