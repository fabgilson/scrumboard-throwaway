<div id="pagination-container">
    <ul class="pagination">
        <li class="page-item">
            <button id="previous-page-button" class="page-link" type="button" @onclick="() => ChangePage(CurrentPage-1)"><i class="bi bi-chevron-left"></i></button>
        </li>
        @foreach (int i in PageRange)
        {
            <li class="@(CurrentPage == i ? "page-item active" : "page-item")">
                <button 
                    id="page-@i-button"
                    class="page-link page-button" 
                    type="button" 
                    disabled="@(i < 0)"
                    @onclick="() => ChangePage(i)">@(i < 0 ? "..." : i)</button>
            </li>
        }            
        <li class="page-item">
            <button id="next-page-button" class="page-link" type="button" @onclick="() => ChangePage(CurrentPage+1)"><i class="bi bi-chevron-right"></i></button>
        </li>
    </ul>
</div>

@code {
    [Parameter]
    public int TotalPages { get; set; }

    [Parameter]
    public int CurrentPage { get; set; }

    [Parameter]
    public EventCallback<int> CurrentPageChanged { get; set; }

    public List<int> PageRange { get; set; }

    protected override void OnInitialized() {
        FormatPages();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        FormatPages();
    }  

    /// <summary>
    /// Generates a list of numbers and ellipses to display for the pagination buttons.
    /// Delta, left, and right can be changed to alter how many numbers are displayed, 
    /// and the positioning of the ellipses.
    /// </summary>      
    private void FormatPages() {
        int delta = 2;
        int left = CurrentPage - delta;
        int right = CurrentPage + delta + 1;
        int? last = null;

        PageRange = new();
        List<int> range = new();

        // Generate the standard range first
        for (int i=1; i <= TotalPages; i++) {
            if (i == 1 || i == TotalPages || i >= left && i < right) {
                range.Add(i);
            }
        }

        // Then use that to generate a truncated range with ellipses
        foreach (int i in range) {
            if (last != null) {
                if (i - last.Value == 2) {
                    PageRange.Add(last.Value+1);
                } else if (i - last.Value != 1) {
                    /// -1 is a placehold for an ellipsis
                    PageRange.Add(-1);
                }
            }
            PageRange.Add(i);
            last = i;
        }
    }

    private async Task ChangePage(int newPage) {
        if (newPage > 0 && newPage <= TotalPages) {
            CurrentPage = newPage;
            await CurrentPageChanged.InvokeAsync(CurrentPage);
        }            
    } 
}