<!--component to input a result by selecting from a list of options in a dropdown-->

@typeparam TResult

<button 
    @attributes=AdditionalAttributes 
    class="@("btn border d-block " + (Disabled ? "" : "dropdown-toggle"))" 
    type="button" 
    id="selection-menu-button" 
    data-bs-toggle="dropdown"
    aria-expanded="false"
>
    <div class="d-inline-block text-start pe-2" style="min-width: 5em;">
        <div class="row gx-1 ellipse-overflow-text">
            @Template(Value)
        </div>
    </div>
</button>
@if (!Disabled)
{
    <ul class="dropdown-menu" aria-labelledby="priority-menu-button" id="@DropDownMenuId">
        @{ var i = 0; }
        @foreach (var option in Options)
        {
            i++;
            <li>
                <button type="button" id="@i" class="dropdown-item @(option.Equals(Value) ? "active-selection" : "")" @onclick="@(() => ValueChanged.InvokeAsync(option))">
                    @Template(option)
                </button>
            </li>
        }
    </ul>
}

@code {    
    [Parameter]
    public TResult Value { get; set; }

    [Parameter]
    public string DropDownMenuId { get; set; } = "";

    [Parameter]
    public EventCallback<TResult> ValueChanged { get; set; }

    ///<summary>Template for converting a selectable option into a dom element</summary>
    [Parameter]
    public RenderFragment<TResult> Template { get; set; }

    ///<summary>Options available for selection</summary>
    [Parameter]
    public List<TResult> Options { get; set; }
    
    [Parameter]
    public bool Disabled { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }
}