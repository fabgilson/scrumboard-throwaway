<!--Modal to confirm skipping a sprint review when trying to close an unreviewed sprint-->

@using ScrumBoard.Shared.Widgets
@using ScrumBoard.Shared.Inputs
@using ScrumBoard.Models.Entities
@using ScrumBoard.Utils

<ResultModal TResult="bool" @ref="_resultModal" style="max-width:40rem;"> 
  <div class="modal-header">
    <h5 class="modal-title" id="review-sprint-modal">Skip Reviewing Sprint</h5>
    <ResultButton Value="true" class="btn-close" aria-label="Close"/>
  </div>
  <div class="modal-body">
    <div>
      <div>
        This will move
        <span class="fw-bold">
          @_sprint.Name
        </span>  
        to
        <SprintStageBadge Stage="SprintStage.Closed"/>
        and all the stories within the sprint will be left un-reviewed.
        It is not possible to move a sprint out of <SprintStageBadge Stage="SprintStage.Closed"/>.
      </div>
      Please type 
      <span class="fw-bold">
        Skip Review 
      </span>
      to confirm.
    </div>
  </div>
  <div class="modal-footer">
    <div>
      <InputConfirm 
        ValidChanged="UpdateConfirmation" 
        ConfirmText="Skip Review"
        />
    </div>
    <ResultButton Value="true" id="close-modal" class="btn btn-outline-secondary">
      Cancel
    </ResultButton>
    <button type="button" id="confirm-skip-sprint-review" class="@("btn btn-primary "  + (_hasConfirmed ? "" : "disabled"))" data-bs-dismiss="modal"
            @onclick="ConfirmSkipSprintReview">
      Skip Sprint Review
    </button>
  </div> 
</ResultModal>

@code {
  private ResultModal<bool> _resultModal;

  private Sprint _sprint;

  private bool _hasConfirmed;

  /// <summary>
  /// Updates the sprint state and displays the modal.
  /// </summary>
  /// <param name="sprint">Sprint to update state to</param>
  /// <returns>Task with bool that is true if selection is cancelled, false otherwise</returns>
  public virtual async Task<bool> Show(Sprint sprint)
  {
    _sprint = sprint;
    _hasConfirmed = false;
    return await _resultModal.Show();
  }

  /// <summary>
  /// Updates hasConfirmed to the given value and refreshes the modal.
  /// </summary>
  /// <param name="hasConfirmed">boolean value to update hasConfirmed to</param>
  private void UpdateConfirmation(bool hasConfirmed)
  {
    _hasConfirmed = hasConfirmed;
    _resultModal.Refresh();
  }

  /// <summary>
  /// If hasConfirmed is true, sets the result of the resultModal to false.
  /// </summary>
  private void ConfirmSkipSprintReview()
  {
    if (_hasConfirmed) _resultModal.SetResult(false);
  }
}