// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ScrumBoard.DataAccess;

#nullable disable

namespace ScrumBoard.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20240209010026_StoreYearOnCheckIn")]
    partial class StoreYearOnCheckIn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FriendlyName")
                        .HasColumnType("longtext");

                    b.Property<string>("Xml")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.AcceptanceCriteria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("InStoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReviewComments")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<long>("UserStoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserStoryId");

                    b.ToTable("AcceptanceCriterias");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Announcements.Announcement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("CanBeHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastEdited")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("LastEditorId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ManuallyArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("LastEditorId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Announcements.AnnouncementHide", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.HasIndex("UserId");

                    b.ToTable("AnnouncementHides");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.ChangelogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("EditingSessionGuid")
                        .HasColumnType("char(36)");

                    b.Property<string>("FieldChanged")
                        .HasColumnType("longtext");

                    b.Property<string>("FromValue")
                        .HasColumnType("longtext");

                    b.Property<string>("ToValue")
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("ChangelogEntries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.FeatureFlags.ProjectFeatureFlag", b =>
                {
                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("FeatureFlag")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectId", "FeatureFlag");

                    b.HasIndex("CreatorId");

                    b.ToTable("ProjectFeatureFlags");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Assignment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<bool>("AllowSavingBeforeStartDate")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AssignmentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("FormTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("RunNumber")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FormTemplateId");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Instances.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("FormInstanceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FormInstanceId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Answer");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Instances.FormInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("AssignmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("ProjectId");

                    b.ToTable("FormInstances");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FormInstance");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.MultichoiceAnswerMultichoiceOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("MultichoiceAnswerId")
                        .HasColumnType("bigint");

                    b.Property<long>("MultichoiceOptionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MultichoiceOptionId");

                    b.HasIndex("MultichoiceAnswerId", "MultichoiceOptionId")
                        .IsUnique();

                    b.ToTable("MultichoiceAnswerMultichoiceOption");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.FormTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(95)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<long>("RunNumber")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FormTemplates");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.FormTemplateBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("FormPosition")
                        .HasColumnType("bigint");

                    b.Property<long>("FormTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FormTemplateId");

                    b.ToTable("FormTemplateBlocks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FormTemplateBlock");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.MultiChoiceOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("BlockId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BlockId");

                    b.ToTable("MultiChoiceOption");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.OverheadEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("DurationTicks")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Occurred")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<long>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("SprintId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("SprintId");

                    b.HasIndex("UserId");

                    b.ToTable("OverheadEntries");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.OverheadSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("OverheadSessions");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsSeedDataProject")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.ProjectUserMembership", b =>
                {
                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUserMemberships");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.ReflectionCheckIns.TaskCheckIn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("CheckInTaskDifficulty")
                        .HasColumnType("int");

                    b.Property<int>("CheckInTaskStatus")
                        .HasColumnType("int");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long>("WeeklyReflectionCheckInId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("WeeklyReflectionCheckInId");

                    b.ToTable("TaskCheckIns");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.ReflectionCheckIns.WeeklyReflectionCheckIn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("varchar(10000)");

                    b.Property<int>("CompletionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("IsoWeekNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("WeeklyReflectionCheckIns");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Relationships.StandUpMeetingAttendance", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("StandUpMeetingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ArrivedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId", "StandUpMeetingId");

                    b.HasIndex("StandUpMeetingId");

                    b.ToTable("StandUpMeetingAttendance");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Relationships.TaggedWorkInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<long>("WorklogEntryId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorklogTagId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WorklogEntryId");

                    b.HasIndex("WorklogTagId");

                    b.ToTable("TaggedWorkInstances");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Relationships.UserStandUpCalendarLink", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("UserStandUpCalendarLinks");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Relationships.UserStoryTaskTagJoin", b =>
                {
                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.HasKey("TagId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("UserStoryTaskTagJoins");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Relationships.WorklogCommitJoin", b =>
                {
                    b.Property<string>("CommitId")
                        .HasColumnType("varchar(95)");

                    b.Property<long>("EntryId")
                        .HasColumnType("bigint");

                    b.HasKey("CommitId", "EntryId");

                    b.HasIndex("EntryId");

                    b.ToTable("WorklogCommitJoins");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.SinglePerUserFlag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("FlagType")
                        .HasColumnType("int");

                    b.Property<bool>("IsSet")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SinglePerUserFlags");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.StandUpMeeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ActualStart")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ScheduledStart")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("SprintId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StartedById")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SprintId");

                    b.HasIndex("StartedById");

                    b.ToTable("StandUpMeetings");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.StoryGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("StoryGroup");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StoryGroup");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LDAPUsername")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.UserStory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Estimate")
                        .HasColumnType("int");

                    b.Property<long>("InProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("ReviewComments")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<long>("StoryGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StoryGroupId");

                    b.ToTable("UserStories");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.UserStoryTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("Complexity")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<long>("EstimateTicks")
                        .HasColumnType("bigint");

                    b.Property<long>("InProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("OriginalEstimateTicks")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<long>("UserStoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("UserStoryId");

                    b.ToTable("UserStoryTasks");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.UserStoryTaskTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UserStoryTaskTags");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.UserTaskAssociation", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("UserTaskAssociations");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.WorklogEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Occurred")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("PairUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PairUserId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("WorklogEntries");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.WorklogTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("Style")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WorklogTags");
                });

            modelBuilder.Entity("ScrumBoard.Models.Gitlab.GitlabCommit", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(95)");

                    b.Property<string>("AuthorEmail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("AuthoredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("WebUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("GitlabCommits");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Backlog", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.StoryGroup");

                    b.Property<long>("BacklogProjectId")
                        .HasColumnType("bigint");

                    b.HasIndex("BacklogProjectId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Backlog");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.OverheadEntryChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.ChangelogEntry");

                    b.Property<long>("OverheadEntryChangedId")
                        .HasColumnType("bigint");

                    b.HasIndex("OverheadEntryChangedId");

                    b.HasDiscriminator().HasValue("OverheadEntryChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.ProjectChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.ChangelogEntry");

                    b.Property<long>("ProjectChangedId")
                        .HasColumnType("bigint");

                    b.HasIndex("ProjectChangedId");

                    b.HasDiscriminator().HasValue("ProjectChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.SprintChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.ChangelogEntry");

                    b.Property<long>("SprintChangedId")
                        .HasColumnType("bigint");

                    b.HasIndex("SprintChangedId");

                    b.HasDiscriminator().HasValue("SprintChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.StandUpMeetingChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.ChangelogEntry");

                    b.Property<long>("StandUpMeetingChangedId")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("StandUpMeetingChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.UserStoryChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.ChangelogEntry");

                    b.Property<long>("UserStoryChangedId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserStoryChangelogEntry_UserStoryChangedId");

                    b.HasIndex("UserStoryChangedId");

                    b.HasDiscriminator().HasValue("UserStoryChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.UserStoryTaskChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.ChangelogEntry");

                    b.Property<long>("UserStoryTaskChangedId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserStoryTaskChangedId");

                    b.HasDiscriminator().HasValue("UserStoryTaskChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.WorklogEntryChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.ChangelogEntry");

                    b.Property<long>("WorklogEntryChangedId")
                        .HasColumnType("bigint");

                    b.HasIndex("WorklogEntryChangedId");

                    b.HasDiscriminator().HasValue("WorklogEntryChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Instances.MultiChoiceAnswer", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Forms.Instances.Answer");

                    b.HasDiscriminator().HasValue("MultiChoiceAnswer");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Instances.TeamFormInstance", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Forms.Instances.FormInstance");

                    b.Property<long>("LinkedProjectId")
                        .HasColumnType("bigint");

                    b.HasIndex("LinkedProjectId");

                    b.HasDiscriminator().HasValue("TeamFormInstance");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Instances.TextAnswer", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Forms.Instances.Answer");

                    b.Property<string>("Answer")
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("TextAnswer");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Instances.UserFormInstance", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Forms.Instances.FormInstance");

                    b.Property<long>("AssigneeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PairId")
                        .HasColumnType("bigint");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("PairId");

                    b.HasDiscriminator().HasValue("UserFormInstance");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.PageBreak", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Forms.Templates.FormTemplateBlock");

                    b.HasDiscriminator().HasValue("PageBreak");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.Question", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Forms.Templates.FormTemplateBlock");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Required")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Question");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.TextBlock", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Forms.Templates.FormTemplateBlock");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("TextBlock");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Sprint", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.StoryGroup");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<long>("SprintProjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("Stage")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("TimeStarted")
                        .HasColumnType("datetime(6)");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SprintProjectId");

                    b.HasDiscriminator().HasValue("Sprint");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.AcceptanceCriteriaChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.UserStoryChangelogEntry");

                    b.Property<long>("AcceptanceCriteriaChangedId")
                        .HasColumnType("bigint");

                    b.HasIndex("AcceptanceCriteriaChangedId");

                    b.HasDiscriminator().HasValue("AcceptanceCriteriaChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.OverheadEntrySessionChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.OverheadEntryChangelogEntry");

                    b.Property<long>("NewSessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("OldSessionId")
                        .HasColumnType("bigint");

                    b.HasIndex("NewSessionId");

                    b.HasIndex("OldSessionId");

                    b.HasDiscriminator().HasValue("OverheadEntrySessionChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.ProjectUserMembershipChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.ProjectChangelogEntry");

                    b.Property<long>("RelatedUserId")
                        .HasColumnType("bigint");

                    b.HasIndex("RelatedUserId");

                    b.HasDiscriminator().HasValue("ProjectUserMembershipChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.SprintStoryAssociationChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.SprintChangelogEntry");

                    b.Property<long>("UserStoryChangedId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserStoryChangedId");

                    b.HasDiscriminator().HasValue("SprintStoryAssociationChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.StandUpMeetingUserMembershipChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.StandUpMeetingChangelogEntry");

                    b.Property<long>("RelatedUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("StandUpMeetingUserMembershipChangelogEntry_RelatedUserId");

                    b.HasIndex("RelatedUserId");

                    b.HasDiscriminator().HasValue("StandUpMeetingUserMembershipChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.TaggedWorkInstanceChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.WorklogEntryChangelogEntry");

                    b.Property<long?>("TaggedWorkInstanceId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorklogEntryId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorklogTagId")
                        .HasColumnType("bigint");

                    b.HasIndex("TaggedWorkInstanceId");

                    b.HasIndex("WorklogEntryId");

                    b.HasIndex("WorklogTagId");

                    b.HasDiscriminator().HasValue("TaggedWorkInstanceChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.UserStoryTaskTagChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.UserStoryTaskChangelogEntry");

                    b.Property<long>("UserStoryTaskTagChangedId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserStoryTaskTagChangedId");

                    b.HasDiscriminator().HasValue("UserStoryTaskTagChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.UserTaskAssociationChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.UserStoryTaskChangelogEntry");

                    b.Property<long>("UserChangedId")
                        .HasColumnType("bigint");

                    b.HasIndex("UserChangedId");

                    b.HasDiscriminator().HasValue("UserTaskAssociationChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.WorklogEntryCommitChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.WorklogEntryChangelogEntry");

                    b.Property<string>("CommitChangedId")
                        .HasColumnType("varchar(95)");

                    b.HasIndex("CommitChangedId");

                    b.HasDiscriminator().HasValue("WorklogEntryCommitChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.WorklogEntryUserAssociationChangelogEntry", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Changelog.WorklogEntryChangelogEntry");

                    b.Property<long?>("PairUserChangedId")
                        .HasColumnType("bigint");

                    b.HasIndex("PairUserChangedId");

                    b.HasDiscriminator().HasValue("WorklogEntryUserAssociationChangelogEntry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.MultiChoiceQuestion", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Forms.Templates.Question");

                    b.Property<bool>("AllowMultiple")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("MultiChoiceQuestion");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.TextQuestion", b =>
                {
                    b.HasBaseType("ScrumBoard.Models.Entities.Forms.Templates.Question");

                    b.Property<int>("MaxResponseLength")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("TextQuestion");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.AcceptanceCriteria", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.UserStory", "UserStory")
                        .WithMany("AcceptanceCriterias")
                        .HasForeignKey("UserStoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStory");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Announcements.Announcement", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.User", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("LastEditor");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Announcements.AnnouncementHide", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Announcements.Announcement", "Announcement")
                        .WithMany("Hides")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.ChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.FeatureFlags.ProjectFeatureFlag", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("ScrumBoard.Models.Entities.Project", "Project")
                        .WithMany("FeatureFlags")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Assignment", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Forms.Templates.FormTemplate", "FormTemplate")
                        .WithMany("Assignments")
                        .HasForeignKey("FormTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormTemplate");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Instances.Answer", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Forms.Instances.FormInstance", "FormInstance")
                        .WithMany("Answers")
                        .HasForeignKey("FormInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.Forms.Templates.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormInstance");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Instances.FormInstance", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Forms.Assignment", "Assignment")
                        .WithMany("Instances")
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.MultichoiceAnswerMultichoiceOption", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Forms.Instances.MultiChoiceAnswer", "MultichoiceAnswer")
                        .WithMany("SelectedOptions")
                        .HasForeignKey("MultichoiceAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.Forms.Templates.MultiChoiceOption", "MultichoiceOption")
                        .WithMany("Answers")
                        .HasForeignKey("MultichoiceOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultichoiceAnswer");

                    b.Navigation("MultichoiceOption");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.FormTemplate", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.FormTemplateBlock", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Forms.Templates.FormTemplate", "FormTemplate")
                        .WithMany("Blocks")
                        .HasForeignKey("FormTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormTemplate");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.MultiChoiceOption", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Forms.Templates.MultiChoiceQuestion", "MultiChoiceQuestion")
                        .WithMany("Options")
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultiChoiceQuestion");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.OverheadEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.OverheadSession", "Session")
                        .WithMany("Entries")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.Sprint", "Sprint")
                        .WithMany("OverheadEntries")
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");

                    b.Navigation("Sprint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Project", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("ScrumBoard.Models.Entities.GitlabCredentials", "GitlabCredentials", b1 =>
                        {
                            b1.Property<long>("ProjectId")
                                .HasColumnType("bigint");

                            b1.Property<string>("AccessToken")
                                .HasColumnType("longtext");

                            b1.Property<string>("GitlabURL")
                                .HasColumnType("varchar(95)");

                            b1.Property<long>("Id")
                                .HasColumnType("bigint");

                            b1.Property<string>("PushWebhookSecretToken")
                                .HasColumnType("longtext");

                            b1.HasKey("ProjectId");

                            b1.HasIndex("Id", "GitlabURL")
                                .IsUnique();

                            b1.ToTable("Projects");

                            b1.WithOwner()
                                .HasForeignKey("ProjectId");
                        });

                    b.Navigation("Creator");

                    b.Navigation("GitlabCredentials");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.ProjectUserMembership", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Project", "Project")
                        .WithMany("MemberAssociations")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.User", "User")
                        .WithMany("ProjectAssociations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.ReflectionCheckIns.TaskCheckIn", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.UserStoryTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.ReflectionCheckIns.WeeklyReflectionCheckIn", "WeeklyReflectionCheckIn")
                        .WithMany("TaskCheckIns")
                        .HasForeignKey("WeeklyReflectionCheckInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("WeeklyReflectionCheckIn");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.ReflectionCheckIns.WeeklyReflectionCheckIn", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Relationships.StandUpMeetingAttendance", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.StandUpMeeting", "StandUpMeeting")
                        .WithMany("ExpectedAttendances")
                        .HasForeignKey("StandUpMeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.User", "User")
                        .WithMany("StandUpMeetingAttendances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StandUpMeeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Relationships.TaggedWorkInstance", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.WorklogEntry", "WorklogEntry")
                        .WithMany("TaggedWorkInstances")
                        .HasForeignKey("WorklogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.WorklogTag", "WorklogTag")
                        .WithMany()
                        .HasForeignKey("WorklogTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorklogEntry");

                    b.Navigation("WorklogTag");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Relationships.UserStandUpCalendarLink", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Relationships.UserStoryTaskTagJoin", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.UserStoryTaskTag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.UserStoryTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Relationships.WorklogCommitJoin", b =>
                {
                    b.HasOne("ScrumBoard.Models.Gitlab.GitlabCommit", "Commit")
                        .WithMany()
                        .HasForeignKey("CommitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.WorklogEntry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commit");

                    b.Navigation("Entry");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.SinglePerUserFlag", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.StandUpMeeting", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.Sprint", "Sprint")
                        .WithMany()
                        .HasForeignKey("SprintId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.User", "StartedBy")
                        .WithMany()
                        .HasForeignKey("StartedById");

                    b.Navigation("Creator");

                    b.Navigation("Sprint");

                    b.Navigation("StartedBy");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.UserStory", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.StoryGroup", "StoryGroup")
                        .WithMany("Stories")
                        .HasForeignKey("StoryGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Project");

                    b.Navigation("StoryGroup");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.UserStoryTask", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.UserStory", "UserStory")
                        .WithMany("Tasks")
                        .HasForeignKey("UserStoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("UserStory");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.UserTaskAssociation", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.UserStoryTask", "Task")
                        .WithMany("UserAssociations")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.User", "User")
                        .WithMany("TaskAssociations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.WorklogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "PairUser")
                        .WithMany()
                        .HasForeignKey("PairUserId");

                    b.HasOne("ScrumBoard.Models.Entities.UserStoryTask", "Task")
                        .WithMany("Worklog")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PairUser");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Backlog", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Project", "Project")
                        .WithOne("Backlog")
                        .HasForeignKey("ScrumBoard.Models.Entities.Backlog", "BacklogProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.OverheadEntryChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.OverheadEntry", "OverheadEntryChanged")
                        .WithMany()
                        .HasForeignKey("OverheadEntryChangedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OverheadEntryChanged");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.ProjectChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Project", "ProjectChanged")
                        .WithMany()
                        .HasForeignKey("ProjectChangedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectChanged");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.SprintChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Sprint", "SprintChanged")
                        .WithMany()
                        .HasForeignKey("SprintChangedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SprintChanged");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.UserStoryChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.UserStory", "UserStoryChanged")
                        .WithMany()
                        .HasForeignKey("UserStoryChangedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStoryChanged");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.UserStoryTaskChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.UserStoryTask", "UserStoryTaskChanged")
                        .WithMany()
                        .HasForeignKey("UserStoryTaskChangedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStoryTaskChanged");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.WorklogEntryChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.WorklogEntry", "WorklogEntryChanged")
                        .WithMany()
                        .HasForeignKey("WorklogEntryChangedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorklogEntryChanged");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Instances.TeamFormInstance", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Project", "LinkedProject")
                        .WithMany()
                        .HasForeignKey("LinkedProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LinkedProject");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Instances.UserFormInstance", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.User", "Pair")
                        .WithMany()
                        .HasForeignKey("PairId");

                    b.Navigation("Assignee");

                    b.Navigation("Pair");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Sprint", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.Project", "Project")
                        .WithMany("Sprints")
                        .HasForeignKey("SprintProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.AcceptanceCriteriaChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.AcceptanceCriteria", "AcceptanceCriteriaChanged")
                        .WithMany()
                        .HasForeignKey("AcceptanceCriteriaChangedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AcceptanceCriteriaChanged");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.OverheadEntrySessionChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.OverheadSession", "NewSession")
                        .WithMany()
                        .HasForeignKey("NewSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.OverheadSession", "OldSession")
                        .WithMany()
                        .HasForeignKey("OldSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewSession");

                    b.Navigation("OldSession");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.ProjectUserMembershipChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "RelatedUser")
                        .WithMany()
                        .HasForeignKey("RelatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedUser");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.SprintStoryAssociationChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.UserStory", "UserStoryChanged")
                        .WithMany()
                        .HasForeignKey("UserStoryChangedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStoryChanged");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.StandUpMeetingUserMembershipChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "RelatedUser")
                        .WithMany()
                        .HasForeignKey("RelatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedUser");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.TaggedWorkInstanceChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.Relationships.TaggedWorkInstance", "TaggedWorkInstance")
                        .WithMany()
                        .HasForeignKey("TaggedWorkInstanceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ScrumBoard.Models.Entities.WorklogEntry", "WorklogEntry")
                        .WithMany()
                        .HasForeignKey("WorklogEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScrumBoard.Models.Entities.WorklogTag", "WorklogTag")
                        .WithMany()
                        .HasForeignKey("WorklogTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaggedWorkInstance");

                    b.Navigation("WorklogEntry");

                    b.Navigation("WorklogTag");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.UserStoryTaskTagChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.UserStoryTaskTag", "UserStoryTaskTagChanged")
                        .WithMany()
                        .HasForeignKey("UserStoryTaskTagChangedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStoryTaskTagChanged");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.UserTaskAssociationChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "UserChanged")
                        .WithMany()
                        .HasForeignKey("UserChangedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserChanged");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.WorklogEntryCommitChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Gitlab.GitlabCommit", "CommitChanged")
                        .WithMany()
                        .HasForeignKey("CommitChangedId");

                    b.Navigation("CommitChanged");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Changelog.WorklogEntryUserAssociationChangelogEntry", b =>
                {
                    b.HasOne("ScrumBoard.Models.Entities.User", "PairUserChanged")
                        .WithMany()
                        .HasForeignKey("PairUserChangedId");

                    b.Navigation("PairUserChanged");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Announcements.Announcement", b =>
                {
                    b.Navigation("Hides");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Assignment", b =>
                {
                    b.Navigation("Instances");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Instances.FormInstance", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.FormTemplate", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.MultiChoiceOption", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.OverheadSession", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Project", b =>
                {
                    b.Navigation("Backlog")
                        .IsRequired();

                    b.Navigation("FeatureFlags");

                    b.Navigation("MemberAssociations");

                    b.Navigation("Sprints");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.ReflectionCheckIns.WeeklyReflectionCheckIn", b =>
                {
                    b.Navigation("TaskCheckIns");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.StandUpMeeting", b =>
                {
                    b.Navigation("ExpectedAttendances");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.StoryGroup", b =>
                {
                    b.Navigation("Stories");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.User", b =>
                {
                    b.Navigation("ProjectAssociations");

                    b.Navigation("StandUpMeetingAttendances");

                    b.Navigation("TaskAssociations");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.UserStory", b =>
                {
                    b.Navigation("AcceptanceCriterias");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.UserStoryTask", b =>
                {
                    b.Navigation("UserAssociations");

                    b.Navigation("Worklog");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.WorklogEntry", b =>
                {
                    b.Navigation("TaggedWorkInstances");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Instances.MultiChoiceAnswer", b =>
                {
                    b.Navigation("SelectedOptions");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Sprint", b =>
                {
                    b.Navigation("OverheadEntries");
                });

            modelBuilder.Entity("ScrumBoard.Models.Entities.Forms.Templates.MultiChoiceQuestion", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
